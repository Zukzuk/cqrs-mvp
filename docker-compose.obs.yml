x-otel-env: &otel_env
  NODE_OPTIONS: "--require /usr/src/app/observability/opentelemetry/dist/sdk.js"
  OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: http://otel-collector:4318/v1/traces
  OTEL_EXPORTER_OTLP_METRICS_ENDPOINT: http://otel-collector:4318/v1/metrics
  OTEL_RESOURCE_ATTRIBUTES: service.version=${SERVICE_VERSION:-0.1.0},deployment.environment=${DEPLOY_ENV:-dev}
  OTEL_PROPAGATORS: tracecontext,baggage
  OTEL_TRACES_SAMPLER: always_on

services:
  otel-collector:
    profiles: ["obs"]
    image: otel/opentelemetry-collector:0.104.0
    container_name: otel-collector
    command: ["--config=/etc/otelcol/config.yaml"]
    volumes:
      - ./observability/opentelemetry/otel-collector.yaml:/etc/otelcol/config.yaml:ro
    depends_on:
      - otel-tempo
    expose:
      - "4317"   # OTLP gRPC
      - "4318"   # OTLP HTTP
    ports:
      - "9464:9464" # Prometheus scrape van collector-metrics
    labels:
      structurizr.name: "OpenTelemetry Collector"
      structurizr.description: "Recieve OTLP and save and/or expose it"
      structurizr.technology: "OpenTelemetry Collector"
      structurizr.port: "9464"
      structurizr.group: "Observability"
      structurizr.type: "telemetry"
      structurizr.depends_on.tempo: "export traces"

  otel-prometheus:
    profiles: ["obs"]
    image: prom/prometheus:v2.53.0
    container_name: otel-prometheus
    volumes:
      - ./observability/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "${PROMETHEUS_PORT}:9090"
    depends_on:
      - otel-collector
      - broker-service
    labels:
      structurizr.name: "Prometheus"
      structurizr.description: "Scrape data from OTel Collector en RabbitMQ"
      structurizr.technology: "Prometheus"
      structurizr.port: "${PROMETHEUS_PORT}"
      structurizr.group: "Observability"
      structurizr.type: "telemetry"
      structurizr.depends_on.otel-collector: "get metrics"
      structurizr.depends_on.broker-service: "scrape metrics"

  otel-tempo:
    profiles: ["obs"]
    image: grafana/tempo:2.6.1
    container_name: otel-tempo
    command: ["-config.file=/etc/tempo/config.yaml"]
    volumes:
      - ./observability/tempo.yaml:/etc/tempo/config.yaml:ro
      - tempo_data:/var/tempo
    ports:
      - "${TEMPO_HTTP_PORT}:3200"  # UI/Query
    labels:
      structurizr.name: "Tempo"
      structurizr.description: "Persistance for traces"
      structurizr.technology: "Grafana Tempo"
      structurizr.port: "${TEMPO_HTTP_PORT}"
      structurizr.group: "Observability"
      structurizr.type: "database"

  otel-grafana:
    profiles: ["obs"]
    image: grafana/grafana:11.1.0
    container_name: otel-grafana
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Editor
    volumes:
      - grafana_data:/var/lib/grafana
      - ./observability/grafana/datasources:/etc/grafana/provisioning/datasources:ro
      - ./observability/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
    ports:
      - "${GRAFANA_PORT}:3000"
    depends_on:
      - otel-prometheus
      - otel-tempo
    labels:
      structurizr.name: "Grafana"
      structurizr.description: "Dashboards and explore traces and metrics"
      structurizr.technology: "Grafana"
      structurizr.port: "${GRAFANA_PORT}"
      structurizr.group: "Observability"
      structurizr.type: "telemetry"
      structurizr.depends_on.prometheus: "get metrics"
      structurizr.depends_on.tempo: "explore traces"
  
  shop-bff-service:
    profiles: ["obs"]
    environment:
      <<: *otel_env
      OTEL_SERVICE_NAME: shop-bff-service

  order-service:
    profiles: ["obs"]
    environment:
      <<: *otel_env
      OTEL_SERVICE_NAME: order-service

  order-eventstore-service:
    profiles: ["obs"]
    environment:
      <<: *otel_env
      OTEL_SERVICE_NAME: order-eventstore-service

  shop-projection-service:
    profiles: ["obs"]
    environment:
      <<: *otel_env
      OTEL_SERVICE_NAME: shop-projection-service

volumes:
  prometheus_data:
  tempo_data:
  grafana_data:
