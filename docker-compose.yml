services:

  broker-service:
    image: rabbitmq:3-management
    container_name: broker-service
    labels:
      structurizr.name: "Broker"
      structurizr.description: "Provides a robust messaging broker with management UI"
      structurizr.technology: "RabbitMQ"
      structurizr.group: "Event Platform"
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - ./rabbitmq.conf.d:/etc/rabbitmq/conf.d/20-logging.conf:ro
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "status"]
      interval: 10s
      timeout: 5s
      retries: 10
  
  order-service:
    build:
      context: .
      dockerfile: order-service/Dockerfile
    container_name: order-service
    labels:
      structurizr.name: "Order Application"
      structurizr.description: "Subscribes to certain Commands, protects the DomainLogic, emits DomainEvents to the broker"
      structurizr.technology: "Node.js, Broker"
      structurizr.group: "Order Domain"
      structurizr.depends_on.broker-service: "subscribe to certain Commands, publish DomainEvents"
      structurizr.depends_on.order-eventstore-service: "fetch streams, commit domain events"
    depends_on:
      - broker-service
      - order-eventstore-service
    ports:
      - "6000:6000"
    environment:
      - BROKER_URL=amqp://guest:guest@broker-service:5672
      - EVENTSTORE_URL=http://order-eventstore-service:7000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6000/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  order-eventstore-service:
    build:
      context: .
      dockerfile: order-eventstore-service/Dockerfile
    container_name: order-eventstore-service
    labels:
      structurizr.name: "Order EventStore"
      structurizr.description: "Durable, append-only event journal"
      structurizr.technology: "Node.js, Express"
      structurizr.group: "Order Domain::Event Store"
      structurizr.depends_on.order-eventstore-db: "read, write"
    depends_on:
      - order-eventstore-db
    environment:
      - MONGO_URL=mongodb://order-eventstore-db:27017
    ports:
      - "7000:7000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7000/health"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  order-eventstore-db:
    image: mongo:7
    container_name: order-eventstore-db
    command: ["--config", "/etc/mongo/mongo.conf"]
    volumes:
      - order_eventstore_data:/data/db
      - ./mongo.conf:/etc/mongo/mongo.conf:ro
    labels:
      structurizr.name: "Order EventStore Database"
      structurizr.description: "Append only journal for DomainEvents"
      structurizr.technology: "MongoDB"
      structurizr.group: "Order Domain::Event Store"
      structurizr.type: "database"
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  shop-projection-service:
    build:
      context: .
      dockerfile: shop-projection-service/Dockerfile
    container_name: shop-projection-service
    labels:
      structurizr.name: "Shop Projection"
      structurizr.description: "Handles fetches, subscribes to DomainEvents, denormalizes and upserts Payloads, pushes Payloads to bff"
      structurizr.technology: "Node.js, Broker, Socket.io-client"
      structurizr.group: "Shop::Projection"
      structurizr.depends_on.broker-service: "subscribe to certain DomainEvents"
      structurizr.depends_on.shop-bff-service: "listen for Queries and push Payloads"
      structurizr.depends_on.shop-projection-db: "fetch data, upsert data"
      structurizr.depends_on.order-eventstore-service: "fetch streams"
    depends_on:
      - broker-service
      - order-eventstore-service
      - shop-bff-service
      - shop-projection-db
    ports:
      - "5000:5000"
    environment:
      - BROKER_URL=amqp://guest:guest@broker-service:5672
      - MONGO_URL=mongodb://shop-projection-db:27017
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  shop-projection-db:
    image: mongo:7
    container_name: shop-projection-db
    command: ["--config", "/etc/mongo/mongo.conf"]
    volumes:
      - shop_projection_db:/data/db
      - ./mongo.conf:/etc/mongo/mongo.conf:ro
    labels:
      structurizr.name: "Shop Projection Database"
      structurizr.description: "Read DB for denormalized views"
      structurizr.technology: "MongoDB"
      structurizr.group: "Shop::Projection"
      structurizr.type: "database"
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  shop-bff-service:
    build:
      context: .
      dockerfile: shop-bff-service/Dockerfile
    container_name: shop-bff-service
    labels:
      structurizr.name: "Shop BFF"
      structurizr.description: "Exposes and guards WebSocket/APIs, publishes Commands to the broker, forwards Queries to projections, listens for Payloads from projections and forwards them to web clients"
      structurizr.technology: "Node.js, Broker, Socket.io"
      structurizr.group: "Shop"
      structurizr.depends_on.broker-service: "publish Commands"
    depends_on:
      - broker-service
    ports:
      - "4000:4000"
    environment:
      - BROKER_URL=amqp://guest:guest@broker-service:5672
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  shop-webserver:
    build:
      context: ./shop-webserver
      dockerfile: Dockerfile
    container_name: shop-webserver
    labels:
      structurizr.name: "Shop Frontend"
      structurizr.description: "Serves static files"
      structurizr.technology: "Nginx"
      structurizr.group: "Shop::Website"
      structurizr.type: "webserver"
      structurizr.depends_on.shop-bff-service: "send Commands and Queries, listen for Payloads"
    depends_on:
      - shop-bff-service
    ports:
      - "3000:3000"

volumes:
  order_eventstore_data:
  shop_projection_db: