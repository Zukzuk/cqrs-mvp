services:

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    labels:
      com.diagram.name: "Broker"
      com.diagram.description: "Provides a robust messaging broker with management UI"
      com.diagram.technology: "RabbitMQ"
      com.diagram.group: "Event Platform"
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - ./rabbitmq.conf.d:/etc/rabbitmq/conf.d/20-logging.conf:ro
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "status"]
      interval: 10s
      timeout: 5s
      retries: 10

  order-service:
    build:
      context: .
      dockerfile: order-service/Dockerfile
    container_name: order-service
    labels:
      com.diagram.name: "OrderApplicationService"
      com.diagram.description: "Subscribes to Commands, validates and handles Commands, protects the DomainLogic, emits DomainEvents to the broker"
      com.diagram.technology: "Node.js, SharedEventbus"
      com.diagram.group: "Order Domain"
      com.diagram.depends_on.rabbitmq: "subscribe to Commands and publish DomainEvents"
    depends_on:
      - rabbitmq
    ports:
      - "6000:6000"
    environment:
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6000/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  order-projection-service:
    build:
      context: .
      dockerfile: order-projection-service/Dockerfile
    container_name: order-projection-service
    labels:
      com.diagram.name: "OrderProjectionService"
      com.diagram.description: "Subscribes to DomainEvents, handles readDB updates, pushes Payloads to bff"
      com.diagram.technology: "Node.js, SharedEventbus, Socket.io-client"
      com.diagram.group: "Shop Frontend"
      com.diagram.depends_on.rabbitmq: "subscribe to DomainEvents"
      com.diagram.depends_on.shop-bff-service: "listen for Queries and push Payloads"
    depends_on:
      - rabbitmq
      - shop-bff-service
    ports:
      - "5000:5000"
    environment:
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  shop-bff-service:
    build:
      context: .
      dockerfile: shop-bff-service/Dockerfile
    container_name: shop-bff-service
    labels:
      com.diagram.name: "Shop Backend-for-frontend"
      com.diagram.description: "Exposes and guards WebSocket/APIs, publishes Commands to the broker, sends snapshotQueries to projections, listens for Payloads from projections, forwards Payloads to web clients"
      com.diagram.technology: "Node.js, SharedEventbus, Socket.io"
      com.diagram.group: "Shop Frontend"
      com.diagram.depends_on.rabbitmq: "publish Commands"
    depends_on:
      - rabbitmq
    ports:
      - "4000:4000"
    environment:
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  shop-frontend:
    build:
      context: ./shop-frontend
      dockerfile: Dockerfile
    container_name: shop-frontend
    labels:
      com.diagram.name: "Shop WebClient"
      com.diagram.description: "Serves static files, connects to bff via wss, sends Commands to bff, renders incoming Payloads"
      com.diagram.technology: "NGINX, html/js, Socket.io.min.js"
      com.diagram.group: "Shop Frontend"
      com.diagram.depends_on.shop-bff-service: "push Commands and listen for Payloads"
    depends_on:
      - shop-bff-service
    ports:
      - "3000:3000"
